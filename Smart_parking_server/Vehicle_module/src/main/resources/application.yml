server:
  port: 9004


spring:

  application:
    name: VehicleService

  datasource:
    url: jdbc:mysql://localhost:3306/Smart_parking_data?useUnicode=true&characterEncoding=UTF-8
    username: root
    password: "001124"
    driver-class-name: com.mysql.cj.jdbc.Driver

  #rabbitmq相关配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password:  guest
    listener:
      simple:
        prefetch: 1   #每次只能获取一条消息，处理完才能获取下一条（提升消息处理速度，避免消息堆积）

  cloud:
    nacos:
      server-addr: localhost:8848      #nacos服务地址
      #配置集群名称，可实现实例的集群属性配置
      #服务间调用默认使用轮训，优先使用相同集群的服务，若不可用，再找其他的
      discovery:
        cluster-name: ServerMaster
        ephemeral: false    #设置为非临时实例
#        namespace:    #填写命名空间id，用于做环境隔离
    sentinel:   #采用懒加载
      transport:
        dashboard: localhost:8080
        port: 8719
        #这个端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。
        #比如 Sentinel 控制台添加了1个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。
        #默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口



management:
  endpoints:
    web:
      exposure:
        include: "*"
#表明所有的Actuator端点都会对外暴露


dubbo:
  consumer:
    check: false    #关闭启动时检查
    retries: 2      #请求服务失败时，重试次数
  application:
    name: VehicleServiceDubbo       #当前服务名字
    qos-enable: false   #关闭qos
    enable-file-cache: false
  #    register-mode: instance
  registry:
    address: nacos://localhost:8848       #注册中心地址
  protocol:
    name: tri    #协议
    port: -1      #（ -1 表示自增端口，从 20880 开始）
    host: localhost